// Code generated by protoc-gen-go.
// source: github.com/micro/monitor-srv/proto/monitor/monitor.proto
// DO NOT EDIT!

/*
Package monitor is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/monitor-srv/proto/monitor/monitor.proto

It has these top-level messages:
	HealthChecksRequest
	HealthChecksResponse
	ServicesRequest
	ServicesResponse
	StatusRequest
	StatusResponse
*/
package monitor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import monitor1 "github.com/micro/go-platform/monitor/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type HealthChecksRequest struct {
	// optional: service name
	Service string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	// optional: healthcheck id
	Id     string                      `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Status monitor1.HealthCheck_Status `protobuf:"varint,3,opt,name=status,enum=HealthCheck_Status" json:"status,omitempty"`
	Limit  uint64                      `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset uint64                      `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
}

func (m *HealthChecksRequest) Reset()                    { *m = HealthChecksRequest{} }
func (m *HealthChecksRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthChecksRequest) ProtoMessage()               {}
func (*HealthChecksRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HealthChecksResponse struct {
	Healthchecks []*monitor1.HealthCheck `protobuf:"bytes,1,rep,name=healthchecks" json:"healthchecks,omitempty"`
}

func (m *HealthChecksResponse) Reset()                    { *m = HealthChecksResponse{} }
func (m *HealthChecksResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthChecksResponse) ProtoMessage()               {}
func (*HealthChecksResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HealthChecksResponse) GetHealthchecks() []*monitor1.HealthCheck {
	if m != nil {
		return m.Healthchecks
	}
	return nil
}

type ServicesRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *ServicesRequest) Reset()                    { *m = ServicesRequest{} }
func (m *ServicesRequest) String() string            { return proto.CompactTextString(m) }
func (*ServicesRequest) ProtoMessage()               {}
func (*ServicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ServicesResponse struct {
	Services []*monitor1.Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ServicesResponse) Reset()                    { *m = ServicesResponse{} }
func (m *ServicesResponse) String() string            { return proto.CompactTextString(m) }
func (*ServicesResponse) ProtoMessage()               {}
func (*ServicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ServicesResponse) GetServices() []*monitor1.Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type StatusRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Limit   int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset  int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	// will break out status by node
	Verbose bool `protobuf:"varint,5,opt,name=verbose" json:"verbose,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type StatusResponse struct {
	Statuses []*monitor1.Status `protobuf:"bytes,1,rep,name=statuses" json:"statuses,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StatusResponse) GetStatuses() []*monitor1.Status {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func init() {
	proto.RegisterType((*HealthChecksRequest)(nil), "HealthChecksRequest")
	proto.RegisterType((*HealthChecksResponse)(nil), "HealthChecksResponse")
	proto.RegisterType((*ServicesRequest)(nil), "ServicesRequest")
	proto.RegisterType((*ServicesResponse)(nil), "ServicesResponse")
	proto.RegisterType((*StatusRequest)(nil), "StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "StatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Monitor service

type MonitorClient interface {
	HealthChecks(ctx context.Context, in *HealthChecksRequest, opts ...client.CallOption) (*HealthChecksResponse, error)
	Services(ctx context.Context, in *ServicesRequest, opts ...client.CallOption) (*ServicesResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...client.CallOption) (*StatusResponse, error)
}

type monitorClient struct {
	c           client.Client
	serviceName string
}

func NewMonitorClient(serviceName string, c client.Client) MonitorClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "monitor"
	}
	return &monitorClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *monitorClient) HealthChecks(ctx context.Context, in *HealthChecksRequest, opts ...client.CallOption) (*HealthChecksResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Monitor.HealthChecks", in)
	out := new(HealthChecksResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) Services(ctx context.Context, in *ServicesRequest, opts ...client.CallOption) (*ServicesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Monitor.Services", in)
	out := new(ServicesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) Status(ctx context.Context, in *StatusRequest, opts ...client.CallOption) (*StatusResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Monitor.Status", in)
	out := new(StatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Monitor service

type MonitorHandler interface {
	HealthChecks(context.Context, *HealthChecksRequest, *HealthChecksResponse) error
	Services(context.Context, *ServicesRequest, *ServicesResponse) error
	Status(context.Context, *StatusRequest, *StatusResponse) error
}

func RegisterMonitorHandler(s server.Server, hdlr MonitorHandler) {
	s.Handle(s.NewHandler(&Monitor{hdlr}))
}

type Monitor struct {
	MonitorHandler
}

func (h *Monitor) HealthChecks(ctx context.Context, in *HealthChecksRequest, out *HealthChecksResponse) error {
	return h.MonitorHandler.HealthChecks(ctx, in, out)
}

func (h *Monitor) Services(ctx context.Context, in *ServicesRequest, out *ServicesResponse) error {
	return h.MonitorHandler.Services(ctx, in, out)
}

func (h *Monitor) Status(ctx context.Context, in *StatusRequest, out *StatusResponse) error {
	return h.MonitorHandler.Status(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0xe5, 0xb3, 0xd4, 0x11, 0x0a, 0x2e, 0x98, 0xd4, 0x9e, 0xcc, 0x7a, 0x21, 0x21, 0x0c, 0x11,
	0x2f, 0xc6, 0xc4, 0x93, 0x17, 0x2f, 0x5e, 0xe4, 0xea, 0x05, 0xea, 0x42, 0x37, 0x52, 0x16, 0x77,
	0xb7, 0xfd, 0x4d, 0xfe, 0x4c, 0xcb, 0xf6, 0xc3, 0x16, 0x31, 0xf1, 0xd4, 0xce, 0xeb, 0xbc, 0x37,
	0x6f, 0xde, 0x14, 0xee, 0x37, 0x5c, 0x07, 0xd1, 0x0a, 0x7d, 0x11, 0xce, 0x42, 0xee, 0x4b, 0x31,
	0x0b, 0xc5, 0x8e, 0x6b, 0x21, 0xa7, 0x4a, 0xc6, 0xb3, 0xbd, 0x14, 0xba, 0x40, 0xf2, 0x27, 0x1a,
	0xd4, 0xfb, 0xcd, 0xdc, 0x88, 0xe9, 0x7e, 0xbb, 0xd4, 0x6b, 0x21, 0xc3, 0x82, 0x53, 0x51, 0x48,
	0x99, 0x34, 0x86, 0xe1, 0x33, 0x5b, 0x6e, 0x75, 0xf0, 0x14, 0x30, 0xff, 0x43, 0xbd, 0xb2, 0xcf,
	0x88, 0x29, 0x4d, 0xfa, 0xd0, 0x51, 0x4c, 0xc6, 0xdc, 0x67, 0x6e, 0xfd, 0xba, 0x3e, 0x3e, 0x23,
	0x00, 0x0d, 0xfe, 0xee, 0x36, 0xcc, 0xfb, 0x0d, 0x58, 0x4a, 0x2f, 0x75, 0xa4, 0xdc, 0x66, 0x52,
	0x3b, 0xf3, 0x21, 0x96, 0x24, 0x70, 0x61, 0x3e, 0x91, 0x1e, 0xb4, 0xb7, 0x3c, 0xe4, 0xda, 0x6d,
	0x25, 0x3d, 0x2d, 0xe2, 0x80, 0x25, 0xd6, 0x6b, 0xc5, 0xb4, 0xdb, 0x3e, 0xd4, 0xf4, 0x01, 0x46,
	0xd5, 0xb9, 0x6a, 0x2f, 0x76, 0x8a, 0x11, 0x0a, 0xdd, 0xc0, 0xe0, 0xbe, 0xc1, 0x93, 0xe9, 0xcd,
	0xf1, 0xf9, 0xbc, 0x5b, 0x9e, 0x40, 0x29, 0xf4, 0x17, 0xa9, 0xb9, 0x3f, 0xfd, 0x52, 0x84, 0xc1,
	0x4f, 0x4f, 0xa6, 0xed, 0x81, 0x9d, 0x35, 0xe5, 0xba, 0x36, 0x66, 0x4d, 0xf4, 0x0d, 0x7a, 0xa9,
	0xf1, 0x7f, 0x25, 0x50, 0x2c, 0x77, 0x08, 0xa0, 0x59, 0x5a, 0xae, 0x65, 0xea, 0x84, 0x1b, 0x33,
	0xb9, 0x12, 0x8a, 0x99, 0x6d, 0x6d, 0x3a, 0x01, 0x27, 0x57, 0xcf, 0xbc, 0x5c, 0x25, 0x5e, 0x0c,
	0x52, 0x78, 0xe9, 0x64, 0xc9, 0xcd, 0xbf, 0xea, 0xd0, 0x79, 0x49, 0x8f, 0x44, 0x1e, 0xa1, 0x5b,
	0x8e, 0x89, 0x8c, 0xf0, 0xc4, 0xb5, 0xbc, 0x4b, 0x3c, 0x95, 0x25, 0xad, 0x91, 0x5b, 0xb0, 0xf3,
	0x14, 0xc8, 0x00, 0x8f, 0x42, 0xf3, 0x2e, 0xf0, 0x38, 0xa2, 0x84, 0x32, 0x01, 0x2b, 0xbb, 0xa0,
	0x83, 0x95, 0x44, 0xbc, 0x3e, 0x56, 0x77, 0xa0, 0xb5, 0x95, 0x65, 0x7e, 0xa2, 0xbb, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x5c, 0x7b, 0x2b, 0x5c, 0xba, 0x02, 0x00, 0x00,
}
